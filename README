# Project Management Application

This is a simple project management application built with **Spring Boot**. The application provides a REST API for managing projects and tasks. You can perform CRUD operations on projects and tasks, filter tasks by status and due date, and view a summary of tasks grouped by their status.

## Features

- **Create, Read, Update, Delete (CRUD) Operations** for Projects and Tasks.
- **Task Filtering** by `status` and `dueDate`.
- **Pagination** for task listing under each project.
- **Task Summary** showing the count of tasks grouped by `status`.
- **In-memory Database (H2)** for temporary data persistence.
- **Docker-Compose** support for containerization.

## Technologies Used

- **Java 17**
- **Spring Boot 2.5.x**
- **Spring Data JPA**
- **H2 Database (In-memory)**
- **JUnit & Mockito for Unit Testing**
- **Docker & Docker-Compose**

## Endpoints

### Project Endpoints

1. **Create a new project**

   - **POST /projects**
   - Request Body:
     ```json
     {
       "name": "Project Name",
       "description": "Project Description"
     }
     ```
   - Response: 201 Created

2. **Retrieve all projects**

   - **GET /projects**
   - Response:
     ```json
     [
       {
         "projectId": 1,
         "projectName": "Project 1",
         "toDoCount": 5,
         "inProgressCount": 2,
         "doneCount": 3
       },
       {
         "projectId": 2,
         "projectName": "Project 2",
         "toDoCount": 0,
         "inProgressCount": 4,
         "doneCount": 1
       }
     ]
     ```

3. **Retrieve a specific project by ID**

   - **GET /projects/{projectId}**
   - Response:
     ```json
     {
       "projectId": 1,
       "projectName": "Project 1",
       "description": "Project Description"
     }
     ```

### Task Endpoints

1. **Add a new task to a specific project**

   - **POST /projects/{projectId}/tasks**
   - Request Body:
     ```json
     {
       "title": "Task Title",
       "description": "Task Description",
       "status": "TO_DO",
       "dueDate": "2024-12-15"
     }
     ```

2. **Retrieve all tasks for a project (with filtering and pagination)**

   - **GET /projects/{projectId}/tasks?status=TO_DO&dueDate=2024-12-15&page=0&size=5**
   - Response:
     ```json
     [
       {
         "taskId": 1,
         "title": "Task Title",
         "status": "TO_DO",
         "dueDate": "2024-12-15"
       }
     ]
     ```

3. **Update a task's details**

   - **PUT /tasks/{taskId}**
   - Request Body:
     ```json
     {
       "title": "Updated Task Title",
       "description": "Updated Task Description",
       "status": "IN_PROGRESS",
       "dueDate": "2024-12-18"
     }
     ```

4. **Delete a task**

   - **DELETE /tasks/{taskId}**
   - Response: 204 No Content

### Project Summary Endpoint

1. **Get project summary**

   - **GET /projects/summary**
   - Response:
     ```json
     [
       {
         "projectId": 1,
         "projectName": "Project 1",
         "toDoCount": 5,
         "inProgressCount": 2,
         "doneCount": 3
       },
       {
         "projectId": 2,
         "projectName": "Project 2",
         "toDoCount": 0,
         "inProgressCount": 4,
         "doneCount": 1
       }
     ]
     ```

## Data Validation

- **Project Name** and **Task Title** cannot be empty.
- **Due Date** must be a valid date format.
- **Task Status** is limited to `TO_DO`, `IN_PROGRESS`, or `DONE`.

## Testing

The application includes unit tests for:

- Project and task creation, retrieval, update, and deletion.
- Filtering and pagination for tasks.
- Summary of tasks grouped by status.

To run the unit tests, use the following command:

```bash
mvn test
